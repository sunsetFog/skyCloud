/*
编译TypeScript的配置文件
tsconfig.json 配置参考(有其他开发规范): https://lq782655835.github.io/blogs/project/ts-tsconfig.html

在文件开头添加，当前文件不检查
// @ts-nocheck

该行代码上加，忽略此行类型检查
// @ts-ignore

断言，关闭该字段类型检查
as any

声明未使用的变量不检查
在变量名前加下划线 _text

设置特定文件为非严格模式
文件开头加上:
'use sloppy';

代码块严格模式
文件代码块位置：
'use strict';

非严格模式的立即执行函数
(function() {
  // 这里是非严格模式
})();

*/
{
  "compilerOptions": {
    "target": "esnext",
    "module": "esnext",
    "alwaysStrict": false,
    "strict": false,// 启用所有严格类型检查选项
    "jsx": "preserve",
    "moduleResolution": "node",
    "experimentalDecorators": true,// 是否启用实验性的ES装饰器
    "skipLibCheck": true,// 跳过所有声明文件的类型检查
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "forceConsistentCasingInFileNames": true,
    "useDefineForClassFields": true,
    "sourceMap": true,
    "noUnusedLocals": false,// 有未使用的变量时，是否抛出错误。boolean值，默认值： false  --- 这里设置无效！！！
    "baseUrl": ".",
    "types": [
      "webpack-env",
      "jest"
    ],
    // 配置路径映射
    "paths": {
      "@/*": [
        "src/*"
      ],
      "@sky/*": ["../../*"],
      "@root/*": ["./*"]
    },
    "lib": [
      "esnext",
      "dom",
      "dom.iterable",
      "scripthost"
    ]
  },
  "include": [
    "src/**/*.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "tests/**/*.ts",
    "tests/**/*.tsx"
  ],
  "exclude": [
    "node_modules"
  ]
}
